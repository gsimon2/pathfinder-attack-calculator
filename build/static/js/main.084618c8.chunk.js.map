{"version":3,"sources":["static/pathfinder-logo-png-2.png","AttackRow.tsx","AttackDetails.tsx","AttackGrouping.tsx","AttackCalculorDisplay.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","AttackContainer","styled","div","StyledInput","input","AttackBonusInput","DamageDiceInput","ToHitInput","props","rollResult","critThreshold","RolledDamageInput","RollButton","button","ClearButton","TextSpan","span","AttackNumberText","ColumnContainer","InputContainer","RollSucka","diceSides","Math","floor","random","AttackRow","attack","rowNumber","inputRef","React","createRef","useState","toHitRollResult","damageDiceResults","state","setState","updateState","updatedValues","prevState","Object","assign","rollDamage","isCrit","rolledDamage","damageByDieResults","damageDice","forEach","dd","index","applyOnlyOnCrit","numberOfRolls","multipleOnCrit","numberOfDie","critMultiplier","results","i","DieSize","push","length","bonusDamage","damageBonus","damageType","DamageType","damageRollResult","damageTotal","reduce","a","b","attackBonus","toHitString","rolledDamageString","displayString","result","toString","generateRolledDamageString","attackBonusAndCrit","console","log","onClick","toHitRoll","type","ref","value","readOnly","generateDamageDiceString","AttackDetailsContainer","Container","ColumContainer","RowContainer","SmallInput","MediumInput","AttackDetails","bonuses","damageDie","isDeadlyAim","setIsDeadlyAim","deadlyAimMod","setDeadlAimMod","attackBonusString","setAttackBonusString","handleDDNumChange","e","DDIndex","newDD","newValue","parseInt","target","error","handleDDSizeChange","handleDDTypeChange","handleDDMultOnCritChange","handleDDApplyOnlyOnCritChange","toggleDeadlyAim","newDeadlyAim","newBonuses","map","bonus","onChange","split","filter","handleAttackBonusChange","handleDamageBonusChange","handleCritThresholdChange","handleCritMultiplierChange","checked","handleDeadlyAimModChange","style","width","event","AttacksContainer","AttackGrouping","items","attacks","getAttacks","key","AttackGroupsContainer","getInitialState","attackGroupings","attackGroupingName","AttackCalculatorDisplay","AppContainer","HeaderContainer","Logo","img","MainContentContainer","App","header","src","pathfinderLogo","mainContent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.084618c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pathfinder-logo-png-2.575f13d4.png\";","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\nimport { DamageDice, Attack } from './model/AttackModel';\r\n\r\nconst AttackContainer = styled.div`\r\n   display: flex;\r\n   flex-direction: row;\r\n   width: 100%;\r\n   padding: 1rem 3rem;\r\n   box-sizing: border-box;\r\n   margin: 0 auto;\r\n   max-width: 50rem;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n   text-align: center;\r\n   margin: 0.25rem 1rem;\r\n`;\r\n\r\nconst AttackBonusInput = styled(StyledInput)`\r\n   width: 8rem;\r\n`;\r\n\r\nconst DamageDiceInput = styled(StyledInput)`\r\n   font-size: x-small;\r\n   width: 18rem;\r\n`;\r\n\r\nconst ToHitInput = styled(StyledInput)<{rollResult: number, critThreshold: number}>`\r\n   width: 8rem;\r\n   background: ${props => (props.rollResult >= props.critThreshold && 'lightgreen')};\r\n   background: ${props => (props.rollResult === 1 && 'lightpink')};\r\n`;\r\n\r\nconst RolledDamageInput = styled(StyledInput)`\r\n   font-size: x-small;\r\n   width: 18rem;\r\n`;\r\n\r\nconst RollButton = styled.button`\r\n   width: 3.5rem;\r\n   margin: 0 0.75rem;\r\n`;\r\n\r\nconst ClearButton = styled.button`\r\n   width: 3.5rem;\r\n   margin: 0 0.75rem;\r\n`;\r\n\r\nconst TextSpan = styled.span`\r\n   font-size: small;\r\n   align-self: center;\r\n`;\r\n\r\nconst AttackNumberText = styled(TextSpan)`\r\n   align-self: center;\r\n`;\r\n\r\nconst ColumnContainer = styled.div`\r\n   display: flex;\r\n`;\r\n\r\nconst InputContainer = styled.div`\r\n   display: flex;\r\n   flex-direction: column;\r\n`;\r\n\r\n\r\nconst RollSucka = (diceSides: number): number => {\r\n   return Math.floor(Math.random() * diceSides + 1); \r\n}\r\n\r\nconst AttackRow: React.FC<IAttackRowProps> = ({attack, rowNumber}) => {\r\n   let inputRef: React.RefObject<HTMLInputElement> = React.createRef();\r\n   const [state, setState] = React.useState({\r\n      toHitRollResult: 0,\r\n      damageDiceResults: []\r\n   } as IAttackRowState);\r\n\r\n   const updateState = (updatedValues: Partial<IAttackRowState>): void => {\r\n      setState(prevState => Object.assign({}, prevState, updatedValues));\r\n   };\r\n\r\n   const handleRollClick = (): void => {\r\n      const toHitRoll = RollSucka(20);\r\n      updateState({toHitRollResult: toHitRoll});\r\n      rollDamage(toHitRoll >= attack.critThreshold);\r\n   };\r\n\r\n   const handleClearClick = (): void => {\r\n      updateState({toHitRollResult: 0, damageDiceResults: []});\r\n   };\r\n   \r\n   const rollDamage = (isCrit: boolean = false): void => {\r\n      const rolledDamage: number[] = [];\r\n      let rolledDamageTotal: number = 0;\r\n      const damageByDieResults: IDamageByDice[] = [];\r\n\r\n      attack.damageDice.forEach((dd: DamageDice, index: number) => {\r\n         if (!dd.applyOnlyOnCrit || (isCrit)) {\r\n            let numberOfRolls = (isCrit && dd.multipleOnCrit) ? dd.numberOfDie * attack.critMultiplier : dd.numberOfDie; \r\n            const results: number[] = [];\r\n            for (let i = 0; i < numberOfRolls; i++) {\r\n               let rollResult = RollSucka(dd.DieSize)\r\n               rolledDamage.push(rollResult);\r\n               results.push(rollResult);\r\n               rolledDamageTotal += rolledDamage[rolledDamage.length-1];\r\n            }\r\n\r\n            let bonusDamage = (index === 0) ? (isCrit ? attack.damageBonus * attack.critMultiplier : attack.damageBonus) : 0;\r\n\r\n            damageByDieResults.push({\r\n               damageType: dd.DamageType ? dd.DamageType : '',\r\n               damageRollResult: results,\r\n               bonusDamage: bonusDamage,\r\n               damageTotal: results.reduce((a,b) => a + b, 0) + bonusDamage\r\n            })\r\n\r\n         }\r\n      });\r\n\r\n      updateState({damageDiceResults: damageByDieResults});\r\n   }\r\n\r\n   const generateDamageDiceString = (damageDice: DamageDice[]): string => {\r\n      let displayString = '';\r\n      damageDice.forEach((dd, index) => {\r\n         displayString += `${dd.numberOfDie}d${dd.DieSize} `\r\n         displayString += index ? \r\n            `${dd.DamageType}` :\r\n            `+ ${!index ? damageBonus: ''} ${dd.DamageType} `;\r\n         if (dd.applyOnlyOnCrit) {\r\n            displayString += ' (on crit) ';\r\n         }\r\n         if (index < damageDice.length - 1) {\r\n            displayString += ' + ';\r\n         }\r\n      });\r\n\r\n      return displayString;\r\n   };\r\n\r\n   const generateRolledDamageString = () => {\r\n      let displayString = '';\r\n      state.damageDiceResults.forEach((result, index) => {\r\n         displayString += `[${result.damageRollResult.toString()}]`;\r\n         displayString += result.bonusDamage ? ` + ${result.bonusDamage} ` : '';\r\n         displayString += ` => ${result.damageTotal} ${result.damageType}`;\r\n         displayString += (index !== state.damageDiceResults.length - 1) ? `,\\t` : '';\r\n      });\r\n      return displayString;\r\n   }\r\n\r\n   const {attackBonus, damageDice, damageBonus, critThreshold, critMultiplier} = attack;\r\n\r\n   const toHitString = `${state.toHitRollResult} + ${attackBonus} = ${state.toHitRollResult + attackBonus}`;\r\n   const rolledDamageString = generateRolledDamageString();\r\n   const attackBonusAndCrit = `${attackBonus} --- ` + (critThreshold === 20 ? `${critThreshold}` : `[${critThreshold}-20]`) + ` x${critMultiplier}`\r\n   console.log(state.damageDiceResults);\r\n\r\n   return (\r\n      <AttackContainer>\r\n         <ColumnContainer>\r\n            <AttackNumberText>{rowNumber} -</AttackNumberText>\r\n            <RollButton onClick={handleRollClick}>Roll!</RollButton>\r\n            <ClearButton onClick={handleClearClick}>Clear</ClearButton>\r\n         </ColumnContainer>\r\n         <ColumnContainer>\r\n            <TextSpan>Attack Bonus:</TextSpan>\r\n            <InputContainer>\r\n               <AttackBonusInput type=\"text\" ref={inputRef}  value={attackBonusAndCrit} readOnly={true}/>\r\n               <ToHitInput type=\"text\" value={toHitString} readOnly={true} rollResult={state.toHitRollResult} critThreshold={attack.critThreshold}/>\r\n            </InputContainer>\r\n         </ColumnContainer>\r\n         <ColumnContainer>\r\n            <TextSpan>Dmg Dice:</TextSpan>\r\n            <InputContainer>\r\n               <DamageDiceInput value={generateDamageDiceString(damageDice)} readOnly={true}/>\r\n               <RolledDamageInput type=\"text\" value={rolledDamageString} readOnly={true}/>\r\n            </InputContainer>\r\n         </ColumnContainer>\r\n      </AttackContainer>\r\n   );\r\n};\r\n\r\nexport default AttackRow;\r\n\r\ninterface IDamageByDice {\r\n   damageType: String;\r\n   damageRollResult: number[];\r\n   bonusDamage: number;\r\n   damageTotal: number;\r\n}\r\n\r\ninterface IAttackRowState {\r\n   toHitRollResult: number;\r\n   damageDiceResults: IDamageByDice[];\r\n}\r\n\r\nexport interface IAttackRowProps {\r\n   attack: Attack;\r\n   rowNumber: number;\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Switch from 'react-switch';\r\nimport {IAttackGroupingState} from './AttackGrouping';\r\nimport {DamageDice} from './model/AttackModel';\r\n\r\nconst AttackDetailsContainer = styled.div`\r\n   display: flex;\r\n   margin: 1rem;\r\n   max-width: 75rem;\r\n   margin: 0 auto;\r\n   border-bottom: gray solid 1px;\r\n   flex-direction: column;\r\n`;\r\n\r\nconst Container = styled.div`\r\n   display: flex;\r\n   margin: 0.5rem 0.5rem;\r\n   justify-content: space-evenly;\r\n\r\n   * {\r\n      margin: 0;\r\n   }\r\n`;\r\n\r\nconst ColumContainer =  styled(Container)`\r\n   justify-content: space-between;\r\n\r\n   div {\r\n      margin: 0.25rem;\r\n   }\r\n`;\r\n\r\nconst RowContainer = styled(Container)`\r\n   flex-direction: column;\r\n   justify-content: flex-start;\r\n`;\r\n\r\nconst TextSpan = styled.span`\r\n   font-size: small;\r\n   text-align: center;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n   text-align: center;\r\n   margin: 0.125rem 0.5rem;\r\n   height: 1rem;\r\n`;\r\n\r\nconst SmallInput = styled(StyledInput)`\r\n   width: 2rem;\r\n`;\r\n\r\nconst MediumInput = styled(StyledInput)`\r\n   width: 4rem;\r\n`;\r\n\r\nconst AttackDetails: React.FC<IAttackDetailsProps> = ({state, updateState}) => {\r\n   const {bonuses, damageBonus, critMultiplier, critThreshold, damageDie} = state;\r\n   const [isDeadlyAim, setIsDeadlyAim] = React.useState(false);\r\n   const [deadlyAimMod, setDeadlAimMod] = React.useState(4);\r\n   const [attackBonusString, setAttackBonusString] = React.useState(bonuses.toString());\r\n\r\n   const handleAttackBonusChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n      isDeadlyAim && toggleDeadlyAim();\r\n      let newBonuses: number[];\r\n      const input: string = e.target.value;\r\n      try {\r\n         newBonuses = input.split(',').filter(value => value.length).map(value => parseInt(value));\r\n         updateState({bonuses: newBonuses});\r\n         setAttackBonusString(input);\r\n      } catch (error) {\r\n         console.error(error);\r\n      }\r\n   };\r\n\r\n   const handleDamageBonusChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n      isDeadlyAim && toggleDeadlyAim();\r\n      try {\r\n         let newValue = parseInt(e.target.value);\r\n         updateState({damageBonus: newValue ? newValue : 0});\r\n      } catch (error) {\r\n         console.error(error);\r\n      }\r\n   };\r\n\r\n   const handleDDNumChange = (e: React.ChangeEvent<HTMLInputElement>, DDIndex: number) => {\r\n      const newDD: DamageDice[] = damageDie;\r\n      try {\r\n         let newValue = parseInt(e.target.value);\r\n         newDD[DDIndex].numberOfDie = newValue ? newValue : 0;\r\n         updateState({damageDie: newDD});\r\n      } catch(error) {\r\n         console.error(error);\r\n      }\r\n   };\r\n\r\n   const handleDDSizeChange = (e: React.ChangeEvent<HTMLInputElement>, DDIndex: number) => {\r\n      const newDD: DamageDice[] = damageDie;\r\n      try {\r\n         let newValue = parseInt(e.target.value);\r\n         newDD[DDIndex].DieSize = newValue ? newValue : 0;\r\n         updateState({damageDie: newDD});\r\n      } catch(error) {\r\n         console.error(error);\r\n      }\r\n   };\r\n\r\n   const handleDDTypeChange = (e: React.ChangeEvent<HTMLInputElement>, DDIndex: number) => {\r\n      const newDD: DamageDice[] = damageDie;\r\n      try {\r\n         let newValue = e.target.value;\r\n         newDD[DDIndex].DamageType = newValue ? newValue : '';\r\n         updateState({damageDie: newDD});\r\n      } catch(error) {\r\n         console.error(error);\r\n      }\r\n   };\r\n\r\n   const handleDDMultOnCritChange = (DDIndex: number) => {\r\n      const newDD: DamageDice[] = damageDie;\r\n      try {\r\n         newDD[DDIndex].multipleOnCrit = !newDD[DDIndex].multipleOnCrit;\r\n         updateState({damageDie: newDD});\r\n      } catch(error) {\r\n         console.error(error);\r\n      }\r\n   };\r\n\r\n   const handleDDApplyOnlyOnCritChange = (DDIndex: number) => {\r\n      const newDD: DamageDice[] = damageDie;\r\n      try {\r\n         newDD[DDIndex].applyOnlyOnCrit = !newDD[DDIndex].applyOnlyOnCrit;\r\n         updateState({damageDie: newDD});\r\n      } catch(error) {\r\n         console.error(error);\r\n      }\r\n   };\r\n\r\n   const toggleDeadlyAim = (): void => {\r\n      const newDeadlyAim = !isDeadlyAim;\r\n      const newBonuses = newDeadlyAim ?\r\n         bonuses.map(bonus => bonus - deadlyAimMod) :\r\n         bonuses.map(bonus => bonus + deadlyAimMod);\r\n      const newDamageBonus = newDeadlyAim ?\r\n         damageBonus + (2 * deadlyAimMod) :\r\n         damageBonus - (2 * deadlyAimMod)\r\n         \r\n      updateState({bonuses: newBonuses, damageBonus: newDamageBonus});\r\n      setIsDeadlyAim(newDeadlyAim);\r\n      setAttackBonusString(newBonuses.toString());\r\n   };\r\n\r\n   const handleDeadlyAimModChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n      isDeadlyAim && toggleDeadlyAim();\r\n      try {\r\n         let newValue = parseInt(e.target.value);\r\n         newValue ? setDeadlAimMod(newValue) : setDeadlAimMod(0);\r\n      } catch(error) {\r\n         console.error(error);\r\n      }\r\n   };\r\n\r\n   const handleCritThresholdChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n      try {\r\n         let newValue = parseInt(e.target.value);\r\n         updateState({critThreshold: newValue ? newValue : 0})\r\n      } catch(error) {\r\n         console.error(error);\r\n      }\r\n   };\r\n\r\n   const handleCritMultiplierChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n      try {\r\n         let newValue = parseInt(e.target.value);\r\n         updateState({critMultiplier: newValue ? newValue : 0})\r\n      } catch(error) {\r\n         console.error(error);\r\n      }\r\n   };\r\n\r\n   return (\r\n      <AttackDetailsContainer>\r\n         <Container>\r\n            <RowContainer>\r\n               <ColumContainer>\r\n                  <TextSpan>Attack Bonuses:</TextSpan>\r\n                  <StyledInput value={attackBonusString} onChange={e => handleAttackBonusChange(e)}/>\r\n               </ColumContainer>\r\n               <ColumContainer>\r\n                  <TextSpan>Damage Bonus</TextSpan>\r\n                  <StyledInput value={damageBonus} onChange={e => handleDamageBonusChange(e)}/>\r\n               </ColumContainer>\r\n            </RowContainer>\r\n            <RowContainer>\r\n               <ColumContainer>\r\n                  <TextSpan>Crit Threshold</TextSpan>\r\n                  <SmallInput value={critThreshold ? critThreshold : ''} onChange={e => handleCritThresholdChange(e)}/>\r\n               </ColumContainer>\r\n               <ColumContainer>\r\n                  <TextSpan>Crit Multiplier</TextSpan>\r\n                  <SmallInput value={critMultiplier ? critMultiplier : ''} onChange={e => handleCritMultiplierChange(e)}/>\r\n               </ColumContainer>\r\n            </RowContainer>\r\n            <RowContainer>\r\n               <ColumContainer>\r\n                  <TextSpan>Deadly Aim</TextSpan>\r\n                  <StyledInput type=\"checkbox\" checked={isDeadlyAim} onChange={toggleDeadlyAim}/>\r\n               </ColumContainer>\r\n               <ColumContainer>\r\n                  <TextSpan>Dealy Aim Mod</TextSpan>\r\n                  <SmallInput value={deadlyAimMod ? deadlyAimMod : ''} onChange={e => handleDeadlyAimModChange(e)}/>\r\n               </ColumContainer>\r\n            </RowContainer>\r\n         </Container>\r\n         <Container>\r\n            <RowContainer>\r\n               <ColumContainer>\r\n                  <TextSpan style={{width: '100%'}}>Damage Dice Primary</TextSpan>\r\n               </ColumContainer>\r\n               <ColumContainer>\r\n                  <TextSpan># Die</TextSpan>\r\n                  <SmallInput value={damageDie[0].numberOfDie ? damageDie[0].numberOfDie : ''} onChange={event => handleDDNumChange(event, 0)}/>\r\n               </ColumContainer>\r\n               <ColumContainer>\r\n                  <TextSpan>Die Size</TextSpan>\r\n                  <SmallInput value={damageDie[0].DieSize ? damageDie[0].DieSize : ''} onChange={event => handleDDSizeChange(event, 0)}/>\r\n               </ColumContainer>\r\n               <ColumContainer>\r\n                  <TextSpan>Damage Type</TextSpan>\r\n                  <MediumInput value={damageDie[0].DamageType} onChange={event => handleDDTypeChange(event, 0)}/>\r\n               </ColumContainer>\r\n               <ColumContainer>\r\n                     <TextSpan>Mult on Crit</TextSpan>\r\n                     <Switch checked={damageDie[0].multipleOnCrit as boolean} onChange={() => handleDDMultOnCritChange(0)}/>\r\n                  </ColumContainer>\r\n                  <ColumContainer>\r\n                     <TextSpan>Apply only on Crit</TextSpan>\r\n                     <Switch checked={damageDie[0].applyOnlyOnCrit as boolean} onChange={() => handleDDApplyOnlyOnCritChange(0)}/>\r\n                  </ColumContainer>\r\n            </RowContainer>\r\n            {damageDie[1] &&\r\n               <RowContainer>\r\n                  <ColumContainer>\r\n                     <TextSpan style={{width: '100%'}}>Damage Dice Secondary</TextSpan>\r\n                  </ColumContainer>\r\n                  <ColumContainer>\r\n                     <TextSpan># Die</TextSpan>\r\n                     <SmallInput value={damageDie[1].numberOfDie ? damageDie[1].numberOfDie : ''} onChange={event => handleDDNumChange(event, 1)}/>\r\n                  </ColumContainer>\r\n                  <ColumContainer>\r\n                     <TextSpan>Die Size</TextSpan>\r\n                     <SmallInput value={damageDie[1].DieSize ? damageDie[1].DieSize : ''} onChange={event => handleDDSizeChange(event, 1)}/>\r\n                  </ColumContainer>\r\n                  <ColumContainer>\r\n                     <TextSpan>Damage Type</TextSpan>\r\n                     <MediumInput value={damageDie[1].DamageType} onChange={event => handleDDTypeChange(event, 1)}/>\r\n                  </ColumContainer>\r\n                  <ColumContainer>\r\n                     <TextSpan>Mult on Crit</TextSpan>\r\n                     <Switch checked={damageDie[1].multipleOnCrit as boolean} onChange={() => handleDDMultOnCritChange(1)}/>\r\n                  </ColumContainer>\r\n                  <ColumContainer>\r\n                     <TextSpan>Apply only on Crit</TextSpan>\r\n                     <Switch checked={damageDie[1].applyOnlyOnCrit as boolean} onChange={() => handleDDApplyOnlyOnCritChange(1)}/>\r\n                  </ColumContainer>\r\n               </RowContainer>\r\n            }\r\n            {damageDie[2] &&\r\n               <RowContainer>\r\n                  <ColumContainer>\r\n                     <TextSpan style={{width: '100%'}}>Damage Dice Tertiary</TextSpan>\r\n                  </ColumContainer>\r\n                  <ColumContainer>\r\n                     <TextSpan># Die</TextSpan>\r\n                     <SmallInput value={damageDie[2].numberOfDie ? damageDie[2].numberOfDie : ''} onChange={event => handleDDNumChange(event, 2)}/>\r\n                  </ColumContainer>\r\n                  <ColumContainer>\r\n                     <TextSpan>Die Size</TextSpan>\r\n                     <SmallInput value={damageDie[2].DieSize ? damageDie[2].DieSize : ''} onChange={event => handleDDSizeChange(event, 2)}/>\r\n                  </ColumContainer>\r\n                  <ColumContainer>\r\n                     <TextSpan>Damage Type</TextSpan>\r\n                     <MediumInput value={damageDie[2].DamageType} onChange={event => handleDDTypeChange(event, 2)}/>\r\n                  </ColumContainer>\r\n                  <ColumContainer>\r\n                     <TextSpan>Mult on Crit</TextSpan>\r\n                     <Switch checked={damageDie[2].multipleOnCrit as boolean} onChange={() => handleDDMultOnCritChange(2)}/>\r\n                  </ColumContainer>\r\n                  <ColumContainer>\r\n                     <TextSpan>Apply only on Crit</TextSpan>\r\n                     <Switch checked={damageDie[2].applyOnlyOnCrit as boolean} onChange={() => handleDDApplyOnlyOnCritChange(2)}/>\r\n                  </ColumContainer>\r\n               </RowContainer>\r\n            }\r\n         </Container>\r\n      </AttackDetailsContainer>\r\n   );\r\n};\r\n\r\nexport default AttackDetails;\r\n\r\nexport interface IAttackDetailsProps {\r\n   state: IAttackGroupingState\r\n   updateState(newState: Partial<IAttackGroupingState>): void;\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {Attack, DamageDice} from './model/AttackModel';\r\nimport AttackRow from './AttackRow';\r\nimport styled from 'styled-components';\r\nimport AttackDetails from './AttackDetails';\r\n\r\nconst AttacksContainer = styled.div`\r\n   display: flex;\r\n   height: 100%;\r\n   flex-direction: column;\r\n   width: 100%;\r\n`;\r\n\r\nconst getInitialState = (): IAttackGroupingState => {\r\n   const bonuses = [28,28,23,23,18,18,13];\r\n   const damageBonus: number = 13;\r\n   const critThreshold: number = 19;\r\n   const critMultiplier: number = 3;\r\n\r\n   const damageDie: DamageDice = {\r\n      numberOfDie: 1,\r\n      DieSize: 8,\r\n      DamageType: 'P',\r\n      multipleOnCrit: true,\r\n      applyOnlyOnCrit: false\r\n   }\r\n   const bonusDie: DamageDice = {\r\n      numberOfDie: 1,\r\n      DieSize: 6,\r\n      DamageType: 'fire',\r\n      multipleOnCrit: false,\r\n      applyOnlyOnCrit: false\r\n   }\r\n   const bonusDie2: DamageDice = {\r\n      numberOfDie: 2,\r\n      DieSize: 6,\r\n      DamageType: 'bleed',\r\n      multipleOnCrit: false,\r\n      applyOnlyOnCrit: true\r\n   }\r\n\r\n   return {\r\n      bonuses: bonuses,\r\n      damageBonus: damageBonus,\r\n      critThreshold: critThreshold,\r\n      critMultiplier: critMultiplier,\r\n      damageDie: [damageDie, bonusDie, bonusDie2]\r\n   } as IAttackGroupingState;\r\n};\r\n\r\nconst AttackGrouping: React.FC<IAttackGroupingProps> = ({}) => {\r\n   const items: JSX.Element[] = [];\r\n   const [state, setState] = React.useState(getInitialState() as IAttackGroupingState);\r\n\r\n   const updateState = (updatedValues: Partial<IAttackGroupingState>): void => {\r\n      setState(prevState => Object.assign({}, prevState, updatedValues));\r\n   };\r\n\r\n   const getAttacks = (): Attack[] => {\r\n      const {bonuses, damageBonus, critMultiplier, critThreshold, damageDie} = state;\r\n      let attacks: Attack[] = [];\r\n   \r\n      bonuses.forEach(bonus => {\r\n         attacks.push({attackBonus: bonus, damageBonus: damageBonus, damageDice: damageDie, critThreshold: critThreshold, critMultiplier: critMultiplier} as Attack)\r\n      })\r\n   \r\n      return attacks;\r\n   }\r\n\r\n\r\n   getAttacks().forEach((attack: Attack, index: number) => {\r\n      items.push(<AttackRow rowNumber={index+1} attack={attack} key={index}/>)\r\n   });\r\n\r\n   return (\r\n      <AttacksContainer>\r\n         <AttackDetails state={state} updateState={updateState}/>\r\n         {items}\r\n      </AttacksContainer>\r\n\r\n   );\r\n}\r\n\r\nexport default AttackGrouping;\r\n\r\nexport interface IAttackGroupingState {\r\n   bonuses: number[];\r\n   damageBonus: number;\r\n   critThreshold: number;\r\n   critMultiplier: number;\r\n   damageDie: DamageDice[];\r\n}\r\n\r\nexport interface IAttackGroupingProps {\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport AttackGrouping from './AttackGrouping';\r\n\r\nconst AttackGroupsContainer = styled.div`\r\n   display: flex;\r\n   height: 100%;\r\n   flex-direction: column;\r\n   width: 100%;\r\n`;\r\n\r\nconst getInitialState = {\r\n   attackGroupings: [{attackGroupingName: 'Furry of Blows 1'}]\r\n};\r\n\r\n\r\nconst AttackCalculatorDisplay: React.FC = () => {\r\n   const [state, setState] = React.useState(getInitialState);\r\n\r\n   const generateAttackGroupings = () => {\r\n      state.attackGroupings.forEach(grouping => {\r\n         return <AttackGrouping/>;\r\n      });\r\n   };\r\n\r\n   return (\r\n      <AttackGroupsContainer>\r\n         <AttackGrouping/>\r\n      </AttackGroupsContainer>\r\n   );\r\n};\r\n\r\nexport default AttackCalculatorDisplay;\r\n\r\ninterface attackGrouping {\r\n   attackGroupingName: string;\r\n}\r\n\r\nexport interface IAttackCalculatorDisplayState {\r\n   attackGroupings: attackGrouping[]\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport styled from 'styled-components';\r\nimport pathfinderLogo from './static/pathfinder-logo-png-2.png'\r\nimport AttackCalculatorDisplay from './AttackCalculorDisplay';\r\n\r\nconst AppContainer = styled.div`\r\n  background-color: #282c34;\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  font-size: calc(10px + 2vmin);\r\n  color: white;\r\n`;\r\n\r\nconst HeaderContainer = styled.div`\r\n  width: 100%;\r\n  height: 4.5rem;\r\n  overflow: hidden;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 0 1rem;\r\n  box-sizing: border-box;\r\n\r\n  span {\r\n    align-self: center;\r\n  }\r\n`;\r\n\r\nconst Logo = styled.img`\r\n  height: 4.5rem;\r\n`;\r\n\r\nconst MainContentContainer = styled.div`\r\n  width: 100%;\r\n  height: calc(100vh - 4.5rem);\r\n  justify-content: center;\r\n  align-items: center;\r\n  display: flex;\r\n  overflow: auto;\r\n`;\r\n\r\n\r\nconst App: React.FC = () => {\r\n\r\n  const header: JSX.Element = (\r\n    <HeaderContainer>\r\n      <Logo src={pathfinderLogo}/>\r\n      <span>\r\n        Pathfinder Attack Calculator\r\n      </span>\r\n      <span>\r\n        V0.1 - By: Glen Simon\r\n      </span>\r\n    </HeaderContainer>\r\n  );\r\n\r\n  const mainContent: JSX.Element = (\r\n    <MainContentContainer>\r\n      <AttackCalculatorDisplay/>\r\n    </MainContentContainer>\r\n  );\r\n\r\n  return (\r\n    <AppContainer>\r\n      {header}\r\n      {mainContent}\r\n    </AppContainer>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <header className=\"App-header\">\r\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n//         <p>\r\n//           Edit <code>src/App.js</code> and save to reload.\r\n//         </p>\r\n//         <a\r\n//           className=\"App-link\"\r\n//           href=\"https://reactjs.org\"\r\n//           target=\"_blank\"\r\n//           rel=\"noopener noreferrer\"\r\n//         >\r\n//           Learn React\r\n//         </a>\r\n//       </header>\r\n//     </div>\r\n//   );\r\n// }\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}